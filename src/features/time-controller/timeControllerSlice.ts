import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState } from "../../app/store";

export interface TimeState {
  percentage: number;
  currentTime: number;
}

const initialState: TimeState = {
  percentage: 0,
  currentTime: 0,
};

export const timeControllerSlice = createSlice({
  name: "time",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setTime: (state, action: PayloadAction<number>) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.percentage = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
});

export const { setTime } = timeControllerSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectPercentage = (state: RootState) => state.time.percentage;

export default timeControllerSlice.reducer;
